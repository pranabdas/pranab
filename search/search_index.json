{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Learning Javascript These are my notes while learning Javascript myself. I am putting it here, in case it helps you. Table of content: The Basics Tools for Javascript development Browser console and external script Working with data Conditional statement Arrays Functions and Objects Functions Variable scope Objects map() Loop Loop DOM Document Object Model Event Handler Node.js Introduction Standard input-output Core modules File system Understanding callbacks module.exports Electron.js Creating first Electron.js application React.js React.js To do list project Shopping cart project Deploy to Github pages","title":"Table of Contents"},{"location":"#learning-javascript","text":"These are my notes while learning Javascript myself. I am putting it here, in case it helps you. Table of content: The Basics Tools for Javascript development Browser console and external script Working with data Conditional statement Arrays Functions and Objects Functions Variable scope Objects map() Loop Loop DOM Document Object Model Event Handler Node.js Introduction Standard input-output Core modules File system Understanding callbacks module.exports Electron.js Creating first Electron.js application React.js React.js To do list project Shopping cart project Deploy to Github pages","title":"Learning Javascript"},{"location":"DOM/dom/","text":"Document Object Model The Web browser is itself an object, Browser Object. We can interact with it like we do with any other object. We can get the window size using an object property, or open a new tab using a method. The html content inside the BOM, is called DOM. Here, we will discuss how we can interact with various DOM elements. For example, you can type these things in the console: document.URL document.title document.head document.body And it will return specific DOM elements. For this tutorial, we will use another html file dom-tutorial.html . querySelector We can use querySelector to target any element in the html as we do in CSS. Note that querySelector will return the first instance of the selection, while querySelectorAll will return the list of all matching elements. Now try yourself: document.querySelector(\"h2\") document.querySelector(\".description\") document.querySelector(\"ul\") document.querySelectorAll(\"h4\") document.querySelectorAll(\"li\") Access and change element: We can select and change and element in the html document: document.querySelector(\"h4.city\").innerHTML document.querySelector(\"h4.city\").outerHTML Now we can change these elements by simply assigning new values. document.querySelector(\"h4.city\").innerHTML = \"List of cities:\" We can access and change class or id as well: document.querySelector(\".city\").className document.querySelector(\".city\").classList document.querySelector(\".city\").classList.add(\"new-class\") document.querySelector(\".city\").classList.remove(\"new-class\")","title":"Document Object Model"},{"location":"DOM/dom/#document-object-model","text":"The Web browser is itself an object, Browser Object. We can interact with it like we do with any other object. We can get the window size using an object property, or open a new tab using a method. The html content inside the BOM, is called DOM. Here, we will discuss how we can interact with various DOM elements. For example, you can type these things in the console: document.URL document.title document.head document.body And it will return specific DOM elements. For this tutorial, we will use another html file dom-tutorial.html .","title":"Document Object Model"},{"location":"DOM/dom/#queryselector","text":"We can use querySelector to target any element in the html as we do in CSS. Note that querySelector will return the first instance of the selection, while querySelectorAll will return the list of all matching elements. Now try yourself: document.querySelector(\"h2\") document.querySelector(\".description\") document.querySelector(\"ul\") document.querySelectorAll(\"h4\") document.querySelectorAll(\"li\") Access and change element: We can select and change and element in the html document: document.querySelector(\"h4.city\").innerHTML document.querySelector(\"h4.city\").outerHTML Now we can change these elements by simply assigning new values. document.querySelector(\"h4.city\").innerHTML = \"List of cities:\" We can access and change class or id as well: document.querySelector(\".city\").className document.querySelector(\".city\").classList document.querySelector(\".city\").classList.add(\"new-class\") document.querySelector(\".city\").classList.remove(\"new-class\")","title":"querySelector"},{"location":"DOM/event-handler/","text":"Event handler We can do something based on the browser events, like when a button is clicked, page is scrolled etc. Let's create a simple html page: <html> <head> <title>Event Handler</title> <style> .header { background-color: aqua; } </style> </head> <body> <h1 class=\"header\">Hello Event Handler</h1> </body> <script> const topHeader = document.querySelector(\".header\"); function clicked() { alert(\"Top header is clicked!\") } topHeader.onclick = clicked; </script> </html> Now whenever we click our header, we will see an alert saying, \"Top header is clicked\". The full list of browser events are available in MDN website .","title":"Event handler"},{"location":"DOM/event-handler/#event-handler","text":"We can do something based on the browser events, like when a button is clicked, page is scrolled etc. Let's create a simple html page: <html> <head> <title>Event Handler</title> <style> .header { background-color: aqua; } </style> </head> <body> <h1 class=\"header\">Hello Event Handler</h1> </body> <script> const topHeader = document.querySelector(\".header\"); function clicked() { alert(\"Top header is clicked!\") } topHeader.onclick = clicked; </script> </html> Now whenever we click our header, we will see an alert saying, \"Top header is clicked\". The full list of browser events are available in MDN website .","title":"Event handler"},{"location":"basics/arrays/","text":"Arrays var colors colors = [\"red\", \"green\", \"blue\", \"orange\"]; console.log(colors) You can use another way to define arrays: colors = new Array(\"red\", \"green\", \"blue\", \"yellow\"); console.log(colors) In javascript arrays an object like we saw the Date() object before. Arrays can hold mixed data types: var mixVar = [45, \"New York\", true] console.log(mixVar) We can access specific item by array index, which starts from 0: console.log(mixVar[1]) New York Properties and methods of array (object) Length of an array property: console.log(colors.length); 4 Methods: reverse the array: console.log(colors.reverse()); [\"yellow\", \"blue\", \"green\", \"red\"] (4) Remove the first item: colors.shift(); console.log(colors); [\"blue\", \"green\", \"red\"] (3) Add new items to the front of an array: colors.unshift(\"purple\", \"orange\"); console.log(colors); [\"purple\", \"orange\", \"blue\", \"green\", \"red\"] (5) Remove the last item of an array: var removedItem; removedItem = colors.pop(); // in this way you can use the removed item console.log(colors); [\"purple\", \"orange\", \"blue\", \"green\"] (4) console.log(removedItem); red Add items to the end of the array: colors.push(\"pink\") console.log(colors) [\"purple\", \"orange\", \"blue\", \"green\", \"pink\"] (5) You can remove items from the middle of the array: colors.splice(2, 1) // .splice(position, number of item to remove) console.log(colors) [\"purple\", \"orange\", \"green\", \"pink\"] (4) Copy an array using .slice() var themeColors = colors.slice() console.log(themeColors) [\"purple\", \"orange\", \"green\", \"pink\"] (4) Index of var pos = colors.indexOf(\"orange\", 0); // give the position where to start the search, here 0. console.log(pos); 1 Join the array elements: var stringArray = colors.join(); console.log(stringArray) purple,orange,green,pink var stringArray = colors.join(\", \"); // you can give the separator as argument console.log(stringArray) purple, orange, green, pink","title":"Arrays"},{"location":"basics/arrays/#arrays","text":"var colors colors = [\"red\", \"green\", \"blue\", \"orange\"]; console.log(colors) You can use another way to define arrays: colors = new Array(\"red\", \"green\", \"blue\", \"yellow\"); console.log(colors) In javascript arrays an object like we saw the Date() object before. Arrays can hold mixed data types: var mixVar = [45, \"New York\", true] console.log(mixVar) We can access specific item by array index, which starts from 0: console.log(mixVar[1]) New York","title":"Arrays"},{"location":"basics/arrays/#properties-and-methods-of-array-object","text":"Length of an array property: console.log(colors.length); 4 Methods: reverse the array: console.log(colors.reverse()); [\"yellow\", \"blue\", \"green\", \"red\"] (4) Remove the first item: colors.shift(); console.log(colors); [\"blue\", \"green\", \"red\"] (3) Add new items to the front of an array: colors.unshift(\"purple\", \"orange\"); console.log(colors); [\"purple\", \"orange\", \"blue\", \"green\", \"red\"] (5) Remove the last item of an array: var removedItem; removedItem = colors.pop(); // in this way you can use the removed item console.log(colors); [\"purple\", \"orange\", \"blue\", \"green\"] (4) console.log(removedItem); red Add items to the end of the array: colors.push(\"pink\") console.log(colors) [\"purple\", \"orange\", \"blue\", \"green\", \"pink\"] (5) You can remove items from the middle of the array: colors.splice(2, 1) // .splice(position, number of item to remove) console.log(colors) [\"purple\", \"orange\", \"green\", \"pink\"] (4) Copy an array using .slice() var themeColors = colors.slice() console.log(themeColors) [\"purple\", \"orange\", \"green\", \"pink\"] (4) Index of var pos = colors.indexOf(\"orange\", 0); // give the position where to start the search, here 0. console.log(pos); 1 Join the array elements: var stringArray = colors.join(); console.log(stringArray) purple,orange,green,pink var stringArray = colors.join(\", \"); // you can give the separator as argument console.log(stringArray) purple, orange, green, pink","title":"Properties and methods of array (object)"},{"location":"basics/conditional-statement/","text":"If condition var age = 33; if (age > 18) { console.log(\"Your are an adult.\"); } if-else var age = 15; if (age > 18) { console.log(\"You are an adult.\"); } else { console.log(\"You are not an adult yet.\"); } During equality test, use === for strict equality: a = 4; b = \"4\"; a == b // this will result true. a === b // this will result false And and or operators are denoted by && and || , respectively. var age = 35; if (age > 18 && age < 60) { console.log(\"You are an adult but not a senior citizen.\"); } There is a shorthand for if-else condition as well: if (a==b) { console.log(\"Match\"); } else { console.log(\"No match\"); } is same as: a==b ? console.log(\"Match\") : console.log(\"No match\");","title":"Conditional statement"},{"location":"basics/conditional-statement/#if-condition","text":"var age = 33; if (age > 18) { console.log(\"Your are an adult.\"); }","title":"If condition"},{"location":"basics/conditional-statement/#if-else","text":"var age = 15; if (age > 18) { console.log(\"You are an adult.\"); } else { console.log(\"You are not an adult yet.\"); } During equality test, use === for strict equality: a = 4; b = \"4\"; a == b // this will result true. a === b // this will result false And and or operators are denoted by && and || , respectively. var age = 35; if (age > 18 && age < 60) { console.log(\"You are an adult but not a senior citizen.\"); } There is a shorthand for if-else condition as well: if (a==b) { console.log(\"Match\"); } else { console.log(\"No match\"); } is same as: a==b ? console.log(\"Match\") : console.log(\"No match\");","title":"if-else"},{"location":"basics/console/","text":"Introduction to Browser console Once you are on the browser console, you will see a sort of terminal with > prompt waiting for you to type commands. First of all, we can print something like \"Hello, world!\". One way is to issue a browser alert. > alert(\"Hello Javascript!\") Press return and you will see a browser alert saying \"Hello Javascript\". You have to click close or Ok to dismiss the alert. This could be bit annoying, so we will directly print in our console: > console.log(\"Hello Javascript!\") Hello Javascript! We can do some basic math as well. > console.log(3 + 5.6) 8.6 We can assign some variables as well, and operate on them. > var name = \"Pranab\" console.log(name) Pranab > var x = 7; var y = 4; var mult = x*y; console.log(mult) 28 You get the idea. Note that it is not necessary to end a line in Javascript with semicolon, this is just my personal preference for better code readability. We can do something bit more advanced like getting printing the date: > var date = new Date(); console.log(date) Wed Apr 22 2020 13:18:27 GMT+0800 (+08) We assigned our date variable a new object called Date() . Now what if we want to print something on the browser viewport? For that we need to understand the structure of our html page. We have an html page with empty body. We will inject something on the body. document.body.innerHTML = \"<p> Today is: \" + date + \"</p>\" Now you see the paragraph with date appearing in our html viewport. However, the date object is bit messy. We can clean it up using some methods: document.body.innerHTML = \"<p> Today is : \" + date.getDate() + \"/\" + date.getMonth() + \"/\" + date.getFullYear() + \".</p>\" However, you will notice one wired thing. The month is previous month. Here the month count starts from 0 (but not the date and Year though), wo we need to add 1 to the month to get correct month. document.body.innerHTML = \"<p> Today is : \" + date.getDate() + \"/\" + (date.getMonth() + 1) + \"/\" + date.getFullYear() + \".</p>\" Note that whatever we are doing in the console are not saved anywhere. So we reload the page, everything will be gone. Console is the playground for you to test your Javascript. We can preserve our Javascript code by putting it inline with the html page or writing the javascript in a separate file, and loading the file with the html. We can write javascript inline with html within the <script></script> tags. Linking to external script files Here we will write our javascript in a separate file called script.js . We will add the script tag after the body element. <script src=\"script.js\"></script> Now we can write our code in the file script.js and reload the index.html to see our changes. Note that if we put the script tag in the head, we need to include defer or async attribute, otherwise it will run into problem of finding the body element before it is created.","title":"Console and external script"},{"location":"basics/console/#introduction-to-browser-console","text":"Once you are on the browser console, you will see a sort of terminal with > prompt waiting for you to type commands. First of all, we can print something like \"Hello, world!\". One way is to issue a browser alert. > alert(\"Hello Javascript!\") Press return and you will see a browser alert saying \"Hello Javascript\". You have to click close or Ok to dismiss the alert. This could be bit annoying, so we will directly print in our console: > console.log(\"Hello Javascript!\") Hello Javascript! We can do some basic math as well. > console.log(3 + 5.6) 8.6 We can assign some variables as well, and operate on them. > var name = \"Pranab\" console.log(name) Pranab > var x = 7; var y = 4; var mult = x*y; console.log(mult) 28 You get the idea. Note that it is not necessary to end a line in Javascript with semicolon, this is just my personal preference for better code readability. We can do something bit more advanced like getting printing the date: > var date = new Date(); console.log(date) Wed Apr 22 2020 13:18:27 GMT+0800 (+08) We assigned our date variable a new object called Date() . Now what if we want to print something on the browser viewport? For that we need to understand the structure of our html page. We have an html page with empty body. We will inject something on the body. document.body.innerHTML = \"<p> Today is: \" + date + \"</p>\" Now you see the paragraph with date appearing in our html viewport. However, the date object is bit messy. We can clean it up using some methods: document.body.innerHTML = \"<p> Today is : \" + date.getDate() + \"/\" + date.getMonth() + \"/\" + date.getFullYear() + \".</p>\" However, you will notice one wired thing. The month is previous month. Here the month count starts from 0 (but not the date and Year though), wo we need to add 1 to the month to get correct month. document.body.innerHTML = \"<p> Today is : \" + date.getDate() + \"/\" + (date.getMonth() + 1) + \"/\" + date.getFullYear() + \".</p>\" Note that whatever we are doing in the console are not saved anywhere. So we reload the page, everything will be gone. Console is the playground for you to test your Javascript. We can preserve our Javascript code by putting it inline with the html page or writing the javascript in a separate file, and loading the file with the html. We can write javascript inline with html within the <script></script> tags.","title":"Introduction to Browser console"},{"location":"basics/console/#linking-to-external-script-files","text":"Here we will write our javascript in a separate file called script.js . We will add the script tag after the body element. <script src=\"script.js\"></script> Now we can write our code in the file script.js and reload the index.html to see our changes. Note that if we put the script tag in the head, we need to include defer or async attribute, otherwise it will run into problem of finding the body element before it is created.","title":"Linking to external script files"},{"location":"basics/setup/","text":"Tools for Javascript development In order to run Javascript all you need any modern browser, and a text editor to write your codes. I am using Visual Studio Code text editor and Safari browser. You can pick any of your choice. Just load an empty index.html file in your browser. Click anywhere on the viewport, and choose Inspect element. There you will find a browser console. That's where we will be working. We can also link a script.js file and write our javascript on a separate file. <!DOCTYPE html> <head> <title>Empty page for Javascript development. </title> </head> <body> </body> <script src=\"script.js\"></script> </html>","title":"Setup"},{"location":"basics/setup/#tools-for-javascript-development","text":"In order to run Javascript all you need any modern browser, and a text editor to write your codes. I am using Visual Studio Code text editor and Safari browser. You can pick any of your choice. Just load an empty index.html file in your browser. Click anywhere on the viewport, and choose Inspect element. There you will find a browser console. That's where we will be working. We can also link a script.js file and write our javascript on a separate file. <!DOCTYPE html> <head> <title>Empty page for Javascript development. </title> </head> <body> </body> <script src=\"script.js\"></script> </html>","title":"Tools for Javascript development"},{"location":"basics/working-with-data/","text":"Working with data In javascript we define a variable with var . Once you define a variable, we can initialize it. We do not need to explicitly declare the data type (like whether integer, float or string). The data type is determined when you assign a value. We can check the datatype following way: > var pi = 3.14; console.log(typeof pi) number Common arithmetic operations var a = 5; var b = 7; var sum = 5 + 7; console.log(sum) 12 var a = 3; var b = 9; var c = 6; var result = a + b*c console.log(result) 57 Some shorthand notations a = a + 4; a += 4; The above works with +, -, *, / a = a + 1; a++; a = a -1; a--; String concatenation var greeting = \"Hello \"; var name = \"Pranab\"; console.log(greeting + name) Hello Pranab Be careful to check the data type while using operators. Notice the following: var a = \"4\"; // this a string var b = 5; var sum = a + b; var sub = a - b; var mult = a * b; console.log(\"sum = \" + sum + \", sub =\" + sub + \", mult =\" + mult) sum = 45, sub =-1, mult =20 Notice the string concatenation in case of addition, however subtraction and multiplication carried out properly even though a was a string. Obviously, it works only when the string contains only numbers.","title":"Working with data"},{"location":"basics/working-with-data/#working-with-data","text":"In javascript we define a variable with var . Once you define a variable, we can initialize it. We do not need to explicitly declare the data type (like whether integer, float or string). The data type is determined when you assign a value. We can check the datatype following way: > var pi = 3.14; console.log(typeof pi) number","title":"Working with data"},{"location":"basics/working-with-data/#common-arithmetic-operations","text":"var a = 5; var b = 7; var sum = 5 + 7; console.log(sum) 12 var a = 3; var b = 9; var c = 6; var result = a + b*c console.log(result) 57","title":"Common arithmetic operations"},{"location":"basics/working-with-data/#some-shorthand-notations","text":"a = a + 4; a += 4; The above works with +, -, *, / a = a + 1; a++; a = a -1; a--;","title":"Some shorthand notations"},{"location":"basics/working-with-data/#string-concatenation","text":"var greeting = \"Hello \"; var name = \"Pranab\"; console.log(greeting + name) Hello Pranab Be careful to check the data type while using operators. Notice the following: var a = \"4\"; // this a string var b = 5; var sum = a + b; var sub = a - b; var mult = a * b; console.log(\"sum = \" + sum + \", sub =\" + sub + \", mult =\" + mult) sum = 45, sub =-1, mult =20 Notice the string concatenation in case of addition, however subtraction and multiplication carried out properly even though a was a string. Obviously, it works only when the string contains only numbers.","title":"String concatenation"},{"location":"electron/electron/","text":"Creating your first Electron.js application We head over to our electron folder, and issue npm init command. It will ask several questions, or you can npm init -y which will say yes to all questions and fill the answers with defaults. It will create a package.json file which you can modify later. I have made a few modifications, and mine looks like this: { \"name\": \"electronapp\", \"version\": \"1.0.0\", \"description\": \"My first electron application.\", \"main\": \"index.js\", \"scripts\": { \"start\": \"electron .\" }, \"repository\": { \"type\": \"git\", \"url\": \"https://github.com/pranabdas/js-learning/\" }, \"author\": \"Pranab Das\", \"license\": \"ISC\", \"dependencies\": { \"electron\": \"^8.2.4\" } } Now we need to install Electron. We will install it locally. npm install electron@latest Create entry point of our application which is index.js . const electron = require(\"electron\"); function createWindow() { let appWindow = new electron.BrowserWindow({ height: 600, width: 800 }); appWindow.loadURL(\"https://google.com\"); }; electron.app.on('ready', createWindow); Now we can start our application: npm start In some cases, this is all you need to have a wrapped web applications. You run your webapp through a server. You don't need to update the app every time you make changes to your app. But this app requires internet connection to function. And depending on the connection speed, the app may be sluggish. Here we are going to learn to create a local app. All we have to is to load a local file, say index.html instead of the external url. const electron = require('electron'); function createWindow() { // Create the browser window. let win = new electron.BrowserWindow({ width: 800, height: 600, minWidth: 300, minHeight: 300, webPreferences: { // in case you need to use node methods in that window nodeIntegration: true } }); // load file index.html win.loadFile('index.html'); // clear the window once closed win.on('closed', () => { win = null; }); }; electron.app.on('ready', createWindow); Where index.html is regular html file.","title":"Creating first Electron.js application"},{"location":"electron/electron/#creating-your-first-electronjs-application","text":"We head over to our electron folder, and issue npm init command. It will ask several questions, or you can npm init -y which will say yes to all questions and fill the answers with defaults. It will create a package.json file which you can modify later. I have made a few modifications, and mine looks like this: { \"name\": \"electronapp\", \"version\": \"1.0.0\", \"description\": \"My first electron application.\", \"main\": \"index.js\", \"scripts\": { \"start\": \"electron .\" }, \"repository\": { \"type\": \"git\", \"url\": \"https://github.com/pranabdas/js-learning/\" }, \"author\": \"Pranab Das\", \"license\": \"ISC\", \"dependencies\": { \"electron\": \"^8.2.4\" } } Now we need to install Electron. We will install it locally. npm install electron@latest Create entry point of our application which is index.js . const electron = require(\"electron\"); function createWindow() { let appWindow = new electron.BrowserWindow({ height: 600, width: 800 }); appWindow.loadURL(\"https://google.com\"); }; electron.app.on('ready', createWindow); Now we can start our application: npm start In some cases, this is all you need to have a wrapped web applications. You run your webapp through a server. You don't need to update the app every time you make changes to your app. But this app requires internet connection to function. And depending on the connection speed, the app may be sluggish. Here we are going to learn to create a local app. All we have to is to load a local file, say index.html instead of the external url. const electron = require('electron'); function createWindow() { // Create the browser window. let win = new electron.BrowserWindow({ width: 800, height: 600, minWidth: 300, minHeight: 300, webPreferences: { // in case you need to use node methods in that window nodeIntegration: true } }); // load file index.html win.loadFile('index.html'); // clear the window once closed win.on('closed', () => { win = null; }); }; electron.app.on('ready', createWindow); Where index.html is regular html file.","title":"Creating your first Electron.js application"},{"location":"functions-objects/functions/","text":"Functions Creating a basic named function. Here I will write the function a file called function.js, and load it to our empty index.html. Later I will use console to call and print the results. function multiply(a, b) { var result = a * b; return result; } Now on the console: mult = multiply(6, 9); console.log(mult); 54 console.log(multiply(17, 4)) 68 Anonymous function Anonymous functions do not have name, they are tied to variables or events. var a = 5/6; var b = 7/9; var theBiggest = function() { a > b ? result = a : result = b; return result; } var biggerRatio = theBiggest() // We invoke the function by adding () to the end of the variable console.log(biggerRatio) 0.8333333333333334 Note that if you don't add the parenthesis () in the end of the variable, and console.log it will print the function. We can have arguments to an anonymous function as well: var theBiggest2 = function(x, y) { x > y ? result = x : result = y; return result; } var biggerRatio2 = theBiggest2(3/4, 5/7); console.log(biggerRatio2) 0.75 Immediately invoked function expression In this case the function is invoked as soon as the browser encounters them. It can populate our variable straightaway. We wrap the whole function inside a parenthesis (), followed by another set of parenthesis to pass the variables. var theBiggest3 = (function(a, b) { a > b ? result = a : result = b; return result; })(3/4, 5/7) console.log(theBiggest3); 0.75 Arrow functions This is pretty much the same as anonymous function but with concise syntax: var total = (price) => { return price + price * 7/100; }; console.log(total(100));","title":"Functions"},{"location":"functions-objects/functions/#functions","text":"Creating a basic named function. Here I will write the function a file called function.js, and load it to our empty index.html. Later I will use console to call and print the results. function multiply(a, b) { var result = a * b; return result; } Now on the console: mult = multiply(6, 9); console.log(mult); 54 console.log(multiply(17, 4)) 68","title":"Functions"},{"location":"functions-objects/functions/#anonymous-function","text":"Anonymous functions do not have name, they are tied to variables or events. var a = 5/6; var b = 7/9; var theBiggest = function() { a > b ? result = a : result = b; return result; } var biggerRatio = theBiggest() // We invoke the function by adding () to the end of the variable console.log(biggerRatio) 0.8333333333333334 Note that if you don't add the parenthesis () in the end of the variable, and console.log it will print the function. We can have arguments to an anonymous function as well: var theBiggest2 = function(x, y) { x > y ? result = x : result = y; return result; } var biggerRatio2 = theBiggest2(3/4, 5/7); console.log(biggerRatio2) 0.75","title":"Anonymous function"},{"location":"functions-objects/functions/#immediately-invoked-function-expression","text":"In this case the function is invoked as soon as the browser encounters them. It can populate our variable straightaway. We wrap the whole function inside a parenthesis (), followed by another set of parenthesis to pass the variables. var theBiggest3 = (function(a, b) { a > b ? result = a : result = b; return result; })(3/4, 5/7) console.log(theBiggest3); 0.75","title":"Immediately invoked function expression"},{"location":"functions-objects/functions/#arrow-functions","text":"This is pretty much the same as anonymous function but with concise syntax: var total = (price) => { return price + price * 7/100; }; console.log(total(100));","title":"Arrow functions"},{"location":"functions-objects/map/","text":"Array.map() const xdata = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; const ydata = xdata.map((item) => (item ** 2)); console.log(ydata); [ 1, 4, 9, 16, 25, 36, 49, 64, 81, 100 ]","title":"map()"},{"location":"functions-objects/map/#arraymap","text":"const xdata = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; const ydata = xdata.map((item) => (item ** 2)); console.log(ydata); [ 1, 4, 9, 16, 25, 36, 49, 64, 81, 100 ]","title":"Array.map()"},{"location":"functions-objects/objects/","text":"Objects Defining an object: var course = new Object(); course.title = \"Learning Javascript\"; course.level = \"Beginner\"; course.published = true; console.log(course); {title: \"Learning Javascript\", level: \"Beginner\", published: true} We can delete a property by the following way: delete course.level There is another shorthand: var course = new Object(); var course = { title: \"Learning Javascript\", level: \"Beginner\", published: true, } Apart from the object properties, we can also have object methods, to do something on the data. Methods are functions. var course = new Object(); var course = { title: \"Learning Javascript\", level: \"Beginner\", published: true, views: 0, updateViews: function(){ return ++course.views; } } You can try printing out course.updateViews() repeatedly. Object constructor These are sort of templates we can reuse. function Course(title, level, published, views) { this.title = title; this.level = level; this.published = published; this.views = views; this.updateViews = function() { return ++this.views; }; } var course01 = new Course(\"Learning Javascript\", \"Beginner\", true, \"0\"); console.log(course01) Course {title: \"Learning Javascript\", level: \"Beginner\", published: true, views: \"0\", updateViews: function} Note: Often we might need to work with external objects and they might have strange naming convention, like fonts:serif . In such cases, javascript will return error if you use dot notation course.fonts:serif . There is a bracket notation to call properties as well course[\"fonts:serif\"] .","title":"Objects"},{"location":"functions-objects/objects/#objects","text":"Defining an object: var course = new Object(); course.title = \"Learning Javascript\"; course.level = \"Beginner\"; course.published = true; console.log(course); {title: \"Learning Javascript\", level: \"Beginner\", published: true} We can delete a property by the following way: delete course.level There is another shorthand: var course = new Object(); var course = { title: \"Learning Javascript\", level: \"Beginner\", published: true, } Apart from the object properties, we can also have object methods, to do something on the data. Methods are functions. var course = new Object(); var course = { title: \"Learning Javascript\", level: \"Beginner\", published: true, views: 0, updateViews: function(){ return ++course.views; } } You can try printing out course.updateViews() repeatedly.","title":"Objects"},{"location":"functions-objects/objects/#object-constructor","text":"These are sort of templates we can reuse. function Course(title, level, published, views) { this.title = title; this.level = level; this.published = published; this.views = views; this.updateViews = function() { return ++this.views; }; } var course01 = new Course(\"Learning Javascript\", \"Beginner\", true, \"0\"); console.log(course01) Course {title: \"Learning Javascript\", level: \"Beginner\", published: true, views: \"0\", updateViews: function} Note: Often we might need to work with external objects and they might have strange naming convention, like fonts:serif . In such cases, javascript will return error if you use dot notation course.fonts:serif . There is a bracket notation to call properties as well course[\"fonts:serif\"] .","title":"Object constructor"},{"location":"functions-objects/variable-scope/","text":"Variable scope When you define a function in the root of your script, it is available globally throughout the script, including inside the function block. When you define a variable inside the function block, it is available only inside the function block. let and const Once const is defined it cannot be changed. Like const PI = 3.14; The value of a const cannot be changed later. On the other hand let is another variable type, which has even smaller scope than var . let has scope only in a block level. function varScope() { var localVar = 1; if (localVar) { var localVar = 2; console.log(localVar); } console.log(localVar); } varScope() 2 2 So we see that if we reassign a variable inside a block, the variable is changed for the whole function. Here comes the let . function varScope() { var localVar = 1; if (localVar) { let localVar = 2; console.log(localVar); } console.log(localVar); } varScope() 2 1 Note that if we define the first variable with let , it's scope will be whole function block while the scope of second let is only the if-condition block. Default values for function argument function greetUser(greetingMessage=\"Hello\", userName=\"User\") { console.log(greetingMessage + \" \" + userName); }; > greetUser() Hello User > greetUser(\"Welcome\") Welcome User > greetUser(\"Welcome\", \"Pranab\") Welcome Pranab Arbitrary number of arguments We can access the arguments by the arguments object. function sumAll() { var sum = 0; for (var ii=0; ii<arguments.length; ii++) { sum += arguments[ii]; }; return sum; }; > sumAll(2, 3, 4) 9","title":"Variable scope"},{"location":"functions-objects/variable-scope/#variable-scope","text":"When you define a function in the root of your script, it is available globally throughout the script, including inside the function block. When you define a variable inside the function block, it is available only inside the function block.","title":"Variable scope"},{"location":"functions-objects/variable-scope/#let-and-const","text":"Once const is defined it cannot be changed. Like const PI = 3.14; The value of a const cannot be changed later. On the other hand let is another variable type, which has even smaller scope than var . let has scope only in a block level. function varScope() { var localVar = 1; if (localVar) { var localVar = 2; console.log(localVar); } console.log(localVar); } varScope() 2 2 So we see that if we reassign a variable inside a block, the variable is changed for the whole function. Here comes the let . function varScope() { var localVar = 1; if (localVar) { let localVar = 2; console.log(localVar); } console.log(localVar); } varScope() 2 1 Note that if we define the first variable with let , it's scope will be whole function block while the scope of second let is only the if-condition block.","title":"let and const"},{"location":"functions-objects/variable-scope/#default-values-for-function-argument","text":"function greetUser(greetingMessage=\"Hello\", userName=\"User\") { console.log(greetingMessage + \" \" + userName); }; > greetUser() Hello User > greetUser(\"Welcome\") Welcome User > greetUser(\"Welcome\", \"Pranab\") Welcome Pranab","title":"Default values for function argument"},{"location":"functions-objects/variable-scope/#arbitrary-number-of-arguments","text":"We can access the arguments by the arguments object. function sumAll() { var sum = 0; for (var ii=0; ii<arguments.length; ii++) { sum += arguments[ii]; }; return sum; }; > sumAll(2, 3, 4) 9","title":"Arbitrary number of arguments"},{"location":"loop/loop/","text":"for loop for (var i = 0; i<10; i++) { console.log(i); } while loop var i = 0; while (i<10) { console.log(i); i++; } do-while loop var i = 0; do { console.log(i); i++; } while (i <10);","title":"loop"},{"location":"loop/loop/#for-loop","text":"for (var i = 0; i<10; i++) { console.log(i); }","title":"for loop"},{"location":"loop/loop/#while-loop","text":"var i = 0; while (i<10) { console.log(i); i++; }","title":"while loop"},{"location":"loop/loop/#do-while-loop","text":"var i = 0; do { console.log(i); i++; } while (i <10);","title":"do-while loop"},{"location":"node/callbacks/","text":"Understanding callbacks As we have seen we are using many asynchronous functions. These functions can execute simultaneously alongside the main function. The main function does not wait for the asynchronous function to finish. In other words, async function does not block the main block execution. In case of async function, we can pass another function as second argument. This is the callback function. Once the async function has finished, it can invoke our callback function. We can define what to do once the async task has finished inside this callback function. For example async setTimeout() function takes two arguments: setTimeout(callback, delay) let delay = 5000; console.log(`Waiting for ${delay/1000} sec.`); setTimeout(() => { console.log(\"The waiting is over!\"); }, delay); console.log(\"This is in the main program.\");","title":"Understanding callbacks"},{"location":"node/callbacks/#understanding-callbacks","text":"As we have seen we are using many asynchronous functions. These functions can execute simultaneously alongside the main function. The main function does not wait for the asynchronous function to finish. In other words, async function does not block the main block execution. In case of async function, we can pass another function as second argument. This is the callback function. Once the async function has finished, it can invoke our callback function. We can define what to do once the async task has finished inside this callback function. For example async setTimeout() function takes two arguments: setTimeout(callback, delay) let delay = 5000; console.log(`Waiting for ${delay/1000} sec.`); setTimeout(() => { console.log(\"The waiting is over!\"); }, delay); console.log(\"This is in the main program.\");","title":"Understanding callbacks"},{"location":"node/core-modules/","text":"Core modules These are the modules comes preinstalled with node.js like the path module we used earlier. const path = require(\"path\"); const dirUpload = path.join(__dirname, \"uploads\"); console.log(dirUpload); The util module: const path = require(\"path\"); const util = require(\"util\"); util.log(path.basename(__filename)); util.log(\" ^ the name of the current file.\"); 28 Apr 22:37:34 - core.js 28 Apr 22:37:34 - ^ the name of the current file. We have dozens of such modules. const v8 = require(\"v8\"); console.log(v8.getHeapStatistics()); { total_heap_size: 4505600, total_heap_size_executable: 524288, total_physical_size: 3408264, total_available_size: 2194589720, used_heap_size: 2376352, heap_size_limit: 2197815296, malloced_memory: 8192, peak_malloced_memory: 123200, does_zap_garbage: 0, number_of_native_contexts: 1, number_of_detached_contexts: 0 } readline module: const readline = require(\"readline\"); const rl = readline.createInterface({ input: process.stdin, output: process.stdout }); rl.question(\"What is you name? \", answer => { console.log(`Hello ${answer}`); process.exit(); });","title":"Core modules"},{"location":"node/core-modules/#core-modules","text":"These are the modules comes preinstalled with node.js like the path module we used earlier. const path = require(\"path\"); const dirUpload = path.join(__dirname, \"uploads\"); console.log(dirUpload); The util module: const path = require(\"path\"); const util = require(\"util\"); util.log(path.basename(__filename)); util.log(\" ^ the name of the current file.\"); 28 Apr 22:37:34 - core.js 28 Apr 22:37:34 - ^ the name of the current file. We have dozens of such modules. const v8 = require(\"v8\"); console.log(v8.getHeapStatistics()); { total_heap_size: 4505600, total_heap_size_executable: 524288, total_physical_size: 3408264, total_available_size: 2194589720, used_heap_size: 2376352, heap_size_limit: 2197815296, malloced_memory: 8192, peak_malloced_memory: 123200, does_zap_garbage: 0, number_of_native_contexts: 1, number_of_detached_contexts: 0 } readline module: const readline = require(\"readline\"); const rl = readline.createInterface({ input: process.stdin, output: process.stdout }); rl.question(\"What is you name? \", answer => { console.log(`Hello ${answer}`); process.exit(); });","title":"Core modules"},{"location":"node/file-system/","text":"File system File list const fs = require(\"fs\"); const files = fs.readdirSync(\".\"); console.log(files); Read file const fs = require(\"fs\"); const text = fs.readFileSync(\"../../README.md\", \"utf-8\"); console.log(text); If we want to ready the binary, we just don't need to provide second encoding argument utf-8 . When we read files synchronously, the code will wait until the job has finished. We can also read files asynchronously. Let us also implement some error handling. const fs = require(\"fs\"); const text = fs.readFile(\"../../README.md\", \"utf-8\", (err, text) => { if (err) { console.log(`An error has occurred!\\n ${err}`); process.exit(); }; console.log(text); }); Write file const fs = require(\"fs\"); const md = ` # This is a new file We are learning how to write file using Node.js. `; fs.writeFile(\"./note.md\", md.trim(), err => { if (err) { throw err; }; console.log(\"File saved!\"); }); Create new directory const fs = require(\"fs\"); fs.mkdir(\"new-dir\", err => { if (err) { throw err; } console.log(\"Directory created!\"); });","title":"File system"},{"location":"node/file-system/#file-system","text":"","title":"File system"},{"location":"node/file-system/#file-list","text":"const fs = require(\"fs\"); const files = fs.readdirSync(\".\"); console.log(files);","title":"File list"},{"location":"node/file-system/#read-file","text":"const fs = require(\"fs\"); const text = fs.readFileSync(\"../../README.md\", \"utf-8\"); console.log(text); If we want to ready the binary, we just don't need to provide second encoding argument utf-8 . When we read files synchronously, the code will wait until the job has finished. We can also read files asynchronously. Let us also implement some error handling. const fs = require(\"fs\"); const text = fs.readFile(\"../../README.md\", \"utf-8\", (err, text) => { if (err) { console.log(`An error has occurred!\\n ${err}`); process.exit(); }; console.log(text); });","title":"Read file"},{"location":"node/file-system/#write-file","text":"const fs = require(\"fs\"); const md = ` # This is a new file We are learning how to write file using Node.js. `; fs.writeFile(\"./note.md\", md.trim(), err => { if (err) { throw err; }; console.log(\"File saved!\"); });","title":"Write file"},{"location":"node/file-system/#create-new-directory","text":"const fs = require(\"fs\"); fs.mkdir(\"new-dir\", err => { if (err) { throw err; } console.log(\"Directory created!\"); });","title":"Create new directory"},{"location":"node/introduction/","text":"Introduction to Node.js For this lesson, you must have Node.js installed. We will write our codes in a file called intro.js console.log(\"Hello Node.js!\") Now we can run the javascript by typing the following in the terminal: $ node intro.js Hello Node.js! Next, let's define a variable and print that out. let message = \"Hello world from the Node.js\"; console.log(message); Note that you can omit the .js from the filename when running node command: node intro Hello world from the Node.js Here the console is a global variable and it is available to us without importing or requiring any class . There are several other global variables like __dirname or `__filename console.log(__dirname); console.log(__filename); /Users/Pranab/Documents/github/js-learning/src/node /Users/Pranab/Documents/github/js-learning/src/node/intro.js We can import external modules by using require . Let's say we import the path module which ships with the Node.js ans load that into a variable called path . Then we try to extract just the filename using a path method. const path = require('path'); console.log(`The file name is : ${path.basename(__filename)}`); The file name is : intro.js Note that for template strings back tics are used instead of single/double quotes. Another important global object is process . console.log(process.pid); console.log(process.versions.node); 89046 12.16.2 process.argv to pass arguments: console.log(process.argv); [ '/usr/local/bin/node', '/Users/Pranab/Documents/github/js-learning/src/node/intro' ] So when we run our program by typing node intro , we are simply passing a array. We can pass more variables: node intro hello \"pranab das\" [ '/usr/local/bin/node', '/Users/Pranab/Documents/github/js-learning/src/node/intro', 'hello', 'pranab das' ] Now we can create flags to pass more arguments to any command. node intro --user \"pranab das\" --greeting hello [ '/usr/local/bin/node', '/Users/Pranab/Documents/github/js-learning/src/node/intro', '--user', 'pranab das', '--greeting', 'hello' ] const grab = flag => { let indexAfterFlag = process.argv.indexOf(flag) + 1; return process.argv[indexAfterFlag]; } const greeting = grab(\"--greeting\"); const user = grab(\"--user\"); console.log(greeting, user); node intro --user \"pranab das\" --greeting hello hello pranab das","title":"Introduction"},{"location":"node/introduction/#introduction-to-nodejs","text":"For this lesson, you must have Node.js installed. We will write our codes in a file called intro.js console.log(\"Hello Node.js!\") Now we can run the javascript by typing the following in the terminal: $ node intro.js Hello Node.js! Next, let's define a variable and print that out. let message = \"Hello world from the Node.js\"; console.log(message); Note that you can omit the .js from the filename when running node command: node intro Hello world from the Node.js Here the console is a global variable and it is available to us without importing or requiring any class . There are several other global variables like __dirname or `__filename console.log(__dirname); console.log(__filename); /Users/Pranab/Documents/github/js-learning/src/node /Users/Pranab/Documents/github/js-learning/src/node/intro.js We can import external modules by using require . Let's say we import the path module which ships with the Node.js ans load that into a variable called path . Then we try to extract just the filename using a path method. const path = require('path'); console.log(`The file name is : ${path.basename(__filename)}`); The file name is : intro.js Note that for template strings back tics are used instead of single/double quotes. Another important global object is process . console.log(process.pid); console.log(process.versions.node); 89046 12.16.2 process.argv to pass arguments: console.log(process.argv); [ '/usr/local/bin/node', '/Users/Pranab/Documents/github/js-learning/src/node/intro' ] So when we run our program by typing node intro , we are simply passing a array. We can pass more variables: node intro hello \"pranab das\" [ '/usr/local/bin/node', '/Users/Pranab/Documents/github/js-learning/src/node/intro', 'hello', 'pranab das' ] Now we can create flags to pass more arguments to any command. node intro --user \"pranab das\" --greeting hello [ '/usr/local/bin/node', '/Users/Pranab/Documents/github/js-learning/src/node/intro', '--user', 'pranab das', '--greeting', 'hello' ] const grab = flag => { let indexAfterFlag = process.argv.indexOf(flag) + 1; return process.argv[indexAfterFlag]; } const greeting = grab(\"--greeting\"); const user = grab(\"--user\"); console.log(greeting, user); node intro --user \"pranab das\" --greeting hello hello pranab das","title":"Introduction to Node.js"},{"location":"node/module.exports/","text":"module.exports We can structure our codes with modular approach. We write our libraries in separate source files, and call them in the main program as we need them. We write the following function in file named myModule.js : module.exports.square = function square(x) { return x**2; }; Now we can have a main program, say main.js where we can call this function. const myModule = require('./myModule'); var x = 5; var x2 = myModule.square(x); console.log(x2); Exporting function with multiple return values One way is to return an object: module.exports.addMult = (input1, input2) => { add = input1 + input2; mult = input1 * input2; return { add: add, mult: mult }; }; Note the use of arrow function to make it concise. const myModule = require('./myModule'); var result = myModule.addMult(3, 4); console.log(`Add. = ${result.add} \\nMult. = ${result.mult}`);","title":"module.exports"},{"location":"node/module.exports/#moduleexports","text":"We can structure our codes with modular approach. We write our libraries in separate source files, and call them in the main program as we need them. We write the following function in file named myModule.js : module.exports.square = function square(x) { return x**2; }; Now we can have a main program, say main.js where we can call this function. const myModule = require('./myModule'); var x = 5; var x2 = myModule.square(x); console.log(x2);","title":"module.exports"},{"location":"node/module.exports/#exporting-function-with-multiple-return-values","text":"One way is to return an object: module.exports.addMult = (input1, input2) => { add = input1 + input2; mult = input1 * input2; return { add: add, mult: mult }; }; Note the use of arrow function to make it concise. const myModule = require('./myModule'); var result = myModule.addMult(3, 4); console.log(`Add. = ${result.add} \\nMult. = ${result.mult}`);","title":"Exporting function with multiple return values"},{"location":"node/std-input-output/","text":"Standard input and output We can use process to print something on the terminal, like console.log . process.stdout.write(\"Hello \"); process.stdout.write(\"Node.js !\\n\"); Hello Node.js ! Example const questions = [ \"What is your name?\", \"How old are you?\", \"What is your mother tongue?\" ] const ask = (index = 0) => { process.stdout.write(`${questions[index]} \\n-:>`); } ask(); const ans = []; process.stdin.on(\"data\", data => { ans.push(data.toString().trim()); if (ans.length < questions.length) { ask(ans.length); } else { process.exit(); } }); process.on('exit', () => { const [name, age, lang] = ans; console.log(`Hey ${name}, so you are ${age} years old and you can speak ${lang}.`) }); Timer const waitTime = 5000; // time is in millisecond const waitInterval = 500; let currentTime = 0; const incTime = () => { currentTime += waitInterval; const pc = Math.floor(currentTime/waitTime*100); process.stdout.clearLine(); process.stdout.cursorTo(0); process.stdout.write(`Waiting... ${pc}%`); }; console.log(`Setting a waiting time of ${waitTime/1000} seconds.`); const timerFinished = () => { clearInterval(interval); process.stdout.clearLine(); process.stdout.cursorTo(0); console.log(\"Done.\"); }; const interval = setInterval(incTime, waitInterval); setTimeout(timerFinished, waitTime);","title":"Standard input-output"},{"location":"node/std-input-output/#standard-input-and-output","text":"We can use process to print something on the terminal, like console.log . process.stdout.write(\"Hello \"); process.stdout.write(\"Node.js !\\n\"); Hello Node.js !","title":"Standard input and output"},{"location":"node/std-input-output/#example","text":"const questions = [ \"What is your name?\", \"How old are you?\", \"What is your mother tongue?\" ] const ask = (index = 0) => { process.stdout.write(`${questions[index]} \\n-:>`); } ask(); const ans = []; process.stdin.on(\"data\", data => { ans.push(data.toString().trim()); if (ans.length < questions.length) { ask(ans.length); } else { process.exit(); } }); process.on('exit', () => { const [name, age, lang] = ans; console.log(`Hey ${name}, so you are ${age} years old and you can speak ${lang}.`) });","title":"Example"},{"location":"node/std-input-output/#timer","text":"const waitTime = 5000; // time is in millisecond const waitInterval = 500; let currentTime = 0; const incTime = () => { currentTime += waitInterval; const pc = Math.floor(currentTime/waitTime*100); process.stdout.clearLine(); process.stdout.cursorTo(0); process.stdout.write(`Waiting... ${pc}%`); }; console.log(`Setting a waiting time of ${waitTime/1000} seconds.`); const timerFinished = () => { clearInterval(interval); process.stdout.clearLine(); process.stdout.cursorTo(0); console.log(\"Done.\"); }; const interval = setInterval(incTime, waitInterval); setTimeout(timerFinished, waitTime);","title":"Timer"},{"location":"react/githubpages/","text":"Deploying React app to github pages Install gh-pages in your project. npm install gh-pages --save-dev Make following changes in the package.json : { \"homepage\": \"https://pranabdas.github.io/suvapp\", \"name\": \"suvapp\", \"version\": \"0.1.0\", \"private\": true, \"dependencies\": { \"@testing-library/jest-dom\": \"^5.11.6\", \"@testing-library/react\": \"^11.2.2\", \"@testing-library/user-event\": \"^12.3.0\", \"react\": \"^17.0.1\", \"react-dom\": \"^17.0.1\", \"react-scripts\": \"4.0.1\", \"web-vitals\": \"^0.2.4\" }, \"scripts\": { \"start\": \"react-scripts start\", \"build\": \"react-scripts build\", \"test\": \"react-scripts test\", \"eject\": \"react-scripts eject\", \"predeploy\": \"npm run build\", \"deploy\": \"gh-pages -d build\" }, ... Deploy command: npm run deploy","title":"Deploy to Github pages"},{"location":"react/githubpages/#deploying-react-app-to-github-pages","text":"Install gh-pages in your project. npm install gh-pages --save-dev Make following changes in the package.json : { \"homepage\": \"https://pranabdas.github.io/suvapp\", \"name\": \"suvapp\", \"version\": \"0.1.0\", \"private\": true, \"dependencies\": { \"@testing-library/jest-dom\": \"^5.11.6\", \"@testing-library/react\": \"^11.2.2\", \"@testing-library/user-event\": \"^12.3.0\", \"react\": \"^17.0.1\", \"react-dom\": \"^17.0.1\", \"react-scripts\": \"4.0.1\", \"web-vitals\": \"^0.2.4\" }, \"scripts\": { \"start\": \"react-scripts start\", \"build\": \"react-scripts build\", \"test\": \"react-scripts test\", \"eject\": \"react-scripts eject\", \"predeploy\": \"npm run build\", \"deploy\": \"gh-pages -d build\" }, ... Deploy command: npm run deploy","title":"Deploying React app to github pages"},{"location":"react/react/","text":"React.js An open source framework to build web application https://reactjs.org . You need to have node.js installed in your system. Alternatively, you can run your development environment in Docker: docker run -ti -p 127.0.0.1:3000:3000 -v ${PWD}:/home node:lts-buster-slim bash // create your app. npx allows to run create-react-app without installing npx create-react-app my-react-app // move to my-react project directory cd my-react-app // start app npm start This will start a server in the localhost. A browser should be launched and you can see a spinning react logo. We will clear all files in public and src directory, except index.html and index.js , respectively. Open src/index.js that is the starting point of the app. We can simplify this file: import React from 'react'; import ReactDOM from 'react-dom'; ReactDOM.render( <div> <h1>Hello React! </h1> <p>I am learning react and liking it. </p> </div> ,document.getElementById('root') ); If we have more than one html element, we have to put everything inside a single div . Creating react component React component allows bit more modular approach: import React from 'react'; import ReactDOM from 'react-dom'; function Heading() { return ( <div> <h1>Hello React! </h1> <p>I am learning React and I am liking it.</p> </div> ) }; ReactDOM.render(< Heading />, document.getElementById('root')); Alternative where we can use extension of React.Component : import React from 'react'; import ReactDOM from 'react-dom'; class Heading extends React.Component { render() { return ( <div> <h1>Hello React! </h1> <p>I am learning React and I am liking it.</p> </div> ) } }; ReactDOM.render(< Heading />, document.getElementById('root')); Important: React component names must start with uppercase letter. Now let's separate our App component in a separate file. Our index.js entry becomes: import { render } from '@testing-library/react'; import React from 'react'; import ReactDOM from 'react-dom'; import App from './App.jsx'; ReactDOM.render(< App />, document.getElementById('root')); We use App.jsx in the src directory: import React from 'react'; function App() { return( <> <h1>Hello React! </h1> <p>I am learning React and I am liking it.</p> </> ) } export default App Now let's display some data. You can get the data from https://api.github.com/users/<username> . import React from 'react'; const user = { \"login\": \"pranabdas\", \"id\": 31024886, \"node_id\": \"MDQ6VXNlcjMxMDI0ODg2\", \"avatar_url\": \"https://avatars2.githubusercontent.com/u/31024886?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/pranabdas\", \"html_url\": \"https://github.com/pranabdas\", \"followers_url\": \"https://api.github.com/users/pranabdas/followers\", \"following_url\": \"https://api.github.com/users/pranabdas/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/pranabdas/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/pranabdas/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/pranabdas/subscriptions\", \"organizations_url\": \"https://api.github.com/users/pranabdas/orgs\", \"repos_url\": \"https://api.github.com/users/pranabdas/repos\", \"events_url\": \"https://api.github.com/users/pranabdas/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/pranabdas/received_events\", \"type\": \"User\", \"site_admin\": false, \"name\": \"Pranab Das\", \"company\": null, \"blog\": \"https://pranabdas.github.io\", \"location\": null, \"email\": null, \"hireable\": null, \"bio\": null, \"twitter_username\": \"pranab_das\", \"public_repos\": 24, \"public_gists\": 1, \"followers\": 0, \"following\": 0, \"created_at\": \"2017-08-15T02:36:34Z\", \"updated_at\": \"2020-12-02T09:35:04Z\" } function App() { return( <> <img src={user.avatar_url} alt={user.name} /> <h3>Hello {user.name}!</h3> <p>Twitter: <a href={`https://twitter.com/${user.twitter_username}`}>@{user.twitter_username}</a></p> </> ) } export default App Let's create an app to add two numbers. Here we will learn how to accept user inputs. We just work in our App.jsx file from previous example. import React, { useState } from 'react'; function App() { const [input1, setInput1] = useState(0); const [input2, setInput2] = useState(0); const [total, setTotal] = useState(input1 + input2); function add() { setTotal(input1 + input2) } return( <> <h3>Adding two numbers</h3> <input type=\"number\" value={input1} onChange={e => setInput1(+e.target.value)} placeholder=\"0\" /> <input type=\"number\" value={input2} onChange={e => setInput2(+e.target.value)} placeholder=\"0\" /> <button onClick={add}>Add</button> <p>{total}</p> </> ) } export default App Fetch data from API import React from 'react'; class App extends React.Component { constructor() { super(); this.state = { loading: false, planet: {} } } componentDidMount() { this.setState({loading: true}) fetch(\"https://swapi.dev/api/planets/2/\") .then(response => response.json()) .then(data => { this.setState({ loading: false, planet: data }) }) } render() { const text = this.state.loading ? \"loading...\" : this.state.planet.name return ( <div> <p>{text}</p> </div> ) } } export default App; Finally, let's combine all that we have learned. We will accept an user input of their Github username, and later show them some info based their Github profile data.","title":"React.js"},{"location":"react/react/#reactjs","text":"An open source framework to build web application https://reactjs.org . You need to have node.js installed in your system. Alternatively, you can run your development environment in Docker: docker run -ti -p 127.0.0.1:3000:3000 -v ${PWD}:/home node:lts-buster-slim bash // create your app. npx allows to run create-react-app without installing npx create-react-app my-react-app // move to my-react project directory cd my-react-app // start app npm start This will start a server in the localhost. A browser should be launched and you can see a spinning react logo. We will clear all files in public and src directory, except index.html and index.js , respectively. Open src/index.js that is the starting point of the app. We can simplify this file: import React from 'react'; import ReactDOM from 'react-dom'; ReactDOM.render( <div> <h1>Hello React! </h1> <p>I am learning react and liking it. </p> </div> ,document.getElementById('root') ); If we have more than one html element, we have to put everything inside a single div .","title":"React.js"},{"location":"react/react/#creating-react-component","text":"React component allows bit more modular approach: import React from 'react'; import ReactDOM from 'react-dom'; function Heading() { return ( <div> <h1>Hello React! </h1> <p>I am learning React and I am liking it.</p> </div> ) }; ReactDOM.render(< Heading />, document.getElementById('root')); Alternative where we can use extension of React.Component : import React from 'react'; import ReactDOM from 'react-dom'; class Heading extends React.Component { render() { return ( <div> <h1>Hello React! </h1> <p>I am learning React and I am liking it.</p> </div> ) } }; ReactDOM.render(< Heading />, document.getElementById('root')); Important: React component names must start with uppercase letter. Now let's separate our App component in a separate file. Our index.js entry becomes: import { render } from '@testing-library/react'; import React from 'react'; import ReactDOM from 'react-dom'; import App from './App.jsx'; ReactDOM.render(< App />, document.getElementById('root')); We use App.jsx in the src directory: import React from 'react'; function App() { return( <> <h1>Hello React! </h1> <p>I am learning React and I am liking it.</p> </> ) } export default App Now let's display some data. You can get the data from https://api.github.com/users/<username> . import React from 'react'; const user = { \"login\": \"pranabdas\", \"id\": 31024886, \"node_id\": \"MDQ6VXNlcjMxMDI0ODg2\", \"avatar_url\": \"https://avatars2.githubusercontent.com/u/31024886?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/pranabdas\", \"html_url\": \"https://github.com/pranabdas\", \"followers_url\": \"https://api.github.com/users/pranabdas/followers\", \"following_url\": \"https://api.github.com/users/pranabdas/following{/other_user}\", \"gists_url\": \"https://api.github.com/users/pranabdas/gists{/gist_id}\", \"starred_url\": \"https://api.github.com/users/pranabdas/starred{/owner}{/repo}\", \"subscriptions_url\": \"https://api.github.com/users/pranabdas/subscriptions\", \"organizations_url\": \"https://api.github.com/users/pranabdas/orgs\", \"repos_url\": \"https://api.github.com/users/pranabdas/repos\", \"events_url\": \"https://api.github.com/users/pranabdas/events{/privacy}\", \"received_events_url\": \"https://api.github.com/users/pranabdas/received_events\", \"type\": \"User\", \"site_admin\": false, \"name\": \"Pranab Das\", \"company\": null, \"blog\": \"https://pranabdas.github.io\", \"location\": null, \"email\": null, \"hireable\": null, \"bio\": null, \"twitter_username\": \"pranab_das\", \"public_repos\": 24, \"public_gists\": 1, \"followers\": 0, \"following\": 0, \"created_at\": \"2017-08-15T02:36:34Z\", \"updated_at\": \"2020-12-02T09:35:04Z\" } function App() { return( <> <img src={user.avatar_url} alt={user.name} /> <h3>Hello {user.name}!</h3> <p>Twitter: <a href={`https://twitter.com/${user.twitter_username}`}>@{user.twitter_username}</a></p> </> ) } export default App Let's create an app to add two numbers. Here we will learn how to accept user inputs. We just work in our App.jsx file from previous example. import React, { useState } from 'react'; function App() { const [input1, setInput1] = useState(0); const [input2, setInput2] = useState(0); const [total, setTotal] = useState(input1 + input2); function add() { setTotal(input1 + input2) } return( <> <h3>Adding two numbers</h3> <input type=\"number\" value={input1} onChange={e => setInput1(+e.target.value)} placeholder=\"0\" /> <input type=\"number\" value={input2} onChange={e => setInput2(+e.target.value)} placeholder=\"0\" /> <button onClick={add}>Add</button> <p>{total}</p> </> ) } export default App","title":"Creating react component"},{"location":"react/react/#fetch-data-from-api","text":"import React from 'react'; class App extends React.Component { constructor() { super(); this.state = { loading: false, planet: {} } } componentDidMount() { this.setState({loading: true}) fetch(\"https://swapi.dev/api/planets/2/\") .then(response => response.json()) .then(data => { this.setState({ loading: false, planet: data }) }) } render() { const text = this.state.loading ? \"loading...\" : this.state.planet.name return ( <div> <p>{text}</p> </div> ) } } export default App; Finally, let's combine all that we have learned. We will accept an user input of their Github username, and later show them some info based their Github profile data.","title":"Fetch data from API"},{"location":"react/shopping-cart/","text":"Project: shopping cart Purpose is to explore react. Let us install Bootstrap as well. npm i bootstrap In the above i stands for install . In order to import bootstrap css to our application, head to src/index.html and add: import 'bootstrap/dist/css/bootstrap.css'; If your server is running, you will notice the font change in the webpage. Create a new folder called components inside our src folder. We will store all our components in this folder. We create a new file counter.jsx . Using .jsx instead of .js might give better code completion.","title":"Shopping cart project"},{"location":"react/shopping-cart/#project-shopping-cart","text":"Purpose is to explore react. Let us install Bootstrap as well. npm i bootstrap In the above i stands for install . In order to import bootstrap css to our application, head to src/index.html and add: import 'bootstrap/dist/css/bootstrap.css'; If your server is running, you will notice the font change in the webpage. Create a new folder called components inside our src folder. We will store all our components in this folder. We create a new file counter.jsx . Using .jsx instead of .js might give better code completion.","title":"Project: shopping cart"},{"location":"react/to-do-list/","text":"To do list project Let's learn react by doing.","title":"To do list project"},{"location":"react/to-do-list/#to-do-list-project","text":"Let's learn react by doing.","title":"To do list project"}]}